{"version":3,"sources":["component/Snake.js","component/Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","event","window","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAEe,WAACA,GACZ,OACI,6BACKA,EAAMC,UAAUC,KAAI,SAACC,EAAKC,GAEvB,IAAMC,EAAQ,CACVC,KAAK,GAAD,OAAKH,EAAI,GAAT,KACJI,IAAI,GAAD,OAAKJ,EAAI,GAAT,MAGP,OACI,yBAAKK,UAAU,YAAYC,IAAKL,EAAGC,MAAOA,SCX/C,WAACL,GAEZ,IAAMK,EAAQ,CACVC,KAAK,GAAD,OAAKN,EAAMG,IAAI,GAAf,KACJI,IAAI,GAAD,OAAKP,EAAMG,IAAI,GAAf,MAGP,OACI,yBAAKK,UAAU,aAAaH,MAAOA,KCNrCK,EAAuB,WAK3B,MAAO,CAF2D,EAA1DC,KAAKC,OAAO,GAAAD,KAAKE,SAFf,GAEmD,GACK,EAA1DF,KAAKC,OAAO,GAAAD,KAAKE,SAHf,GAGmD,KAIzDC,EAAe,CACnBC,KAAML,IACJM,MAAO,IACPC,UAAW,QACXhB,UAAW,CACT,CAAC,EAAG,GACJ,CAAC,EAAG,KA4HKiB,E,4MAtHbC,MAAQL,E,EAaRM,UAAY,SAACC,GAEX,QADAA,EAAQA,GAASC,OAAOD,OACVE,SACZ,KAAK,GACH,EAAKC,SAAS,CAAEP,UAAW,OAC3B,MACF,KAAK,GACH,EAAKO,SAAS,CAAEP,UAAW,SAC3B,MACF,KAAK,GACH,EAAKO,SAAS,CAAEP,UAAW,SAC3B,MACF,KAAK,GACH,EAAKO,SAAS,CAAEP,UAAW,Y,EAKjCQ,UAAY,WACV,IAAIC,EAAI,YAAO,EAAKP,MAAMlB,WACtB0B,EAAOD,EAAKA,EAAKE,OAAS,GAE9B,OAAQ,EAAKT,MAAMF,WACjB,IAAK,QACHU,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAC3B,MACF,IAAK,KACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAG/BD,EAAKG,KAAKF,GACVD,EAAKI,QACL,EAAKN,SAAS,CACZvB,UAAWyB,K,kEAjDbK,YAAYC,KAAKP,UAAWO,KAAKb,MAAMH,OACvCiB,SAASC,UAAYF,KAAKZ,Y,2CAI1BY,KAAKG,sBACLH,KAAKI,mBACLJ,KAAKK,e,4CA+CL,IAAIV,EAAOK,KAAKb,MAAMlB,UAAU+B,KAAKb,MAAMlB,UAAU2B,OAAO,IACxDD,EAAK,IAAM,KAAOA,EAAK,IAAM,KAAOA,EAAK,GAAK,GAAKA,EAAK,GAAK,IAC/DK,KAAKM,e,yCAIW,IAAD,OACbC,EAAK,YAAOP,KAAKb,MAAMlB,WACvB0B,EAAOY,EAAMA,EAAMX,OAAS,GAChCW,EAAMC,MACND,EAAME,SAAQ,SAAAtC,GACRwB,EAAK,IAAMxB,EAAI,IAAMwB,EAAK,IAAMxB,EAAI,IACtC,EAAKmC,kB,mCAMT,IAAIX,EAAOK,KAAKb,MAAMlB,UAAU+B,KAAKb,MAAMlB,UAAU2B,OAAS,GAC1Db,EAAOiB,KAAKb,MAAMJ,KAClBY,EAAK,IAAMZ,EAAK,IAAMY,EAAK,IAAMZ,EAAK,KACxCiB,KAAKR,SAAS,CACZT,KAAML,MAERsB,KAAKU,eACLV,KAAKW,mB,qCAKP,IAAIC,EAAQ,YAAOZ,KAAKb,MAAMlB,WAC9B2C,EAASC,QAAQ,IACjBb,KAAKR,SAAS,CACZvB,UAAW2C,M,sCAKTZ,KAAKb,MAAMH,MAAQ,IACrBgB,KAAKR,SAAS,CACZR,MAAOgB,KAAKb,MAAMH,MAAQ,O,mCAM9B8B,MAAM,8BAAD,OAA+Bd,KAAKb,MAAMlB,UAAU2B,SACzDI,KAAKR,SAASV,K,+BAMd,OACE,yBAAKN,UAAU,aACb,kBAACuC,EAAD,CAAO9C,UAAW+B,KAAKb,MAAMlB,YAC7B,kBAAC+C,EAAD,CAAM7C,IAAK6B,KAAKb,MAAMJ,Y,GAnHZkC,aCVEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b960692c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`\r\n                }\r\n\r\n                return (\r\n                    <div className=\"snake-dot\" key={i} style={style}></div>\r\n                )\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n\r\n    return (\r\n        <div className=\"snake-food\" style={style}></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Snake from './component/Snake';\r\nimport Food from './component/Food';\r\n\r\nconst getRandomCoordinates = () => {\r\n  let min = 1;\r\n  let max = 98;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y]\r\n}\r\n\r\nconst initialState = {\r\n  food: getRandomCoordinates(),\r\n    speed: 200,\r\n    direction: 'RIGHT',\r\n    snakeDots: [\r\n      [0, 0],\r\n      [2, 0]\r\n    ]\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.checkIfOutOfBorders();\r\n    this.checkIfCollapsed();\r\n    this.checkIfEat()\r\n  }\r\n\r\n  onKeyDown = (event) => {\r\n    event = event || window.event;\r\n    switch (event.keyCode) {\r\n      case 38:\r\n        this.setState({ direction: 'UP' });\r\n        break;\r\n      case 40:\r\n        this.setState({ direction: 'DOWN' });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction: 'LEFT' });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction: 'RIGHT' });\r\n        break;\r\n    }\r\n  }\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots\r\n    })\r\n  }\r\n\r\n  checkIfOutOfBorders() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length-1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  checkIfCollapsed() {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach(dot => {\r\n      if (head[0] == dot[0] && head[1] == dot[1]){\r\n        this.onGameOver();\r\n      }\r\n    })\r\n  }\r\n\r\n  checkIfEat() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] == food[0] && head[1] == food[1]){\r\n      this.setState({\r\n        food: getRandomCoordinates()\r\n      })\r\n      this.enlargeSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n  \r\n  enlargeSnake() {\r\n    let newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([])\r\n    this.setState({\r\n      snakeDots: newSnake\r\n    })\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10\r\n      })\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\r\n    this.setState(initialState)\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className=\"game-area\">\r\n        <Snake snakeDots={this.state.snakeDots} />\r\n        <Food dot={this.state.food} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}